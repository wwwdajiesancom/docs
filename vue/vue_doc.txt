ECMAScript6:
		为了兼容以前的浏览器,
			a.方法一,需要引入
				bootstrap.js
				traceur.js
			b.方法二,可以用node来执行
				node --harmony_desctructuring xxx.js
			c.方法三,直接在线编译
				http://babeljs.io/repl/
				http://google.github.io/traceur-compiler/demo/repl.html
			它们主要是对es6语法的解析
			<script type="module">
				
				//在js文件中写,'use strict'
			</script>
	特点:
		1.变量的定义
			a.使用let定义变量,它是作用于块作用域{}
				var定义的变量,它是函数作用域
			b.let定义的变量,在同一个块域不能重复的定义
				var的可以
			c.const,定义一个常量

			解构赋值:
				let [a,b]=[12,23];
				let {a,b}={a:12,b:345};

		2.字符串
			添加了新的字符串模版,``;可以在模版中使用自定义的变量,${}
		3.数组
			数组的复制,
				let arr1 = [1,2,3,4,5];
				let arr2 = Array.from(arr1);
				let arr3 = [...arr1];
		4.Map
			Map与json非常的类似,都是key->value的键值对;但是定义、存放、获取、删除、遍历的方式都是不一样的
			let map = new Map();
			map.set(key,value);
			map.get(key);
			map.delete(key);
			//针对Map的遍历,增加了for of
			for(items of map){
				//items是一个数组,0=key,1=value
			}
		5.定义函数,现在可以使用箭头函数
			()=>{

			};
			箭头函数的优缺点,
				this,不能代表当前的对象,它代表的是父级的对象
				argsments,不可以使用这个动态的参数了
		6.出现了class,constructor的概念;并且函数的定义也变的简洁了,函数参数默认值name(options={}){};
		有extends的概念
			bind(this),重新的声明this;在有些地方会使用了
			class Person{
				constructor(name,age){
					this.name = name;
					this.age = age;
				}
				showName(){
					return this.name;
				}
				showAge(){
					return this.age;
				}
			}
			class JobPerson extends Person{
				constructor(name,age,job='程序员'){
					super(name,age);
					this.job = job;
				}
				showJob(){
					return this.job;
				}
			}
		7.模块化
			如何导出模块,
				const a = 12;
				export default a;
			如何导入模块,还有部分浏览器不支持了,需要bootstrap,traceur
				import moduleName from './module.js';
				moduleName,可以随便的写
		8.Promise---承诺
			Promise,它就是一个对象,用来传递异步操作的数据(消息)
			Promise,它一共有3种状态
				pending(等待、处理中)---->Resolve(完成、成功)
									---->Rejected(拒绝、失败)
									---->上面的两种状态,只能存在一种
			使用,
				let promise = new Promise(function(resolve,reject){
					//这里面可以写一个写ajax调用
					//resolve,它是成功时需要调用的方法,resolve(res);
					//reject,它是失败时需要调用的方法,reject(error);
				});
				promise.then(function(res){
					//第一个function,接收成功的结果
				},function(error){
					//第二个function,接收失败的结果
				});
				promise.catch(function(e){
					//catch,它是捕获异常的
				});
				
				Promise,他携带的一些方法
					//1.返回一个成功的Promise对象,params它可以是[js对象,promise对象等]
					let p1 = Promise.resolve(params);
					//2.返回一个失败的Promise对象
					let p2 = Promise.reject(params);
					//3.当all,中的所有Promise对象都是成功的,才会执行resolve,否则执行reject
					let p3 = Promise.all([p1,p2]).then(function(res){

					},function(error){

					});
					//4.resolve,执行速度最快的那个
					let p4 = Promise.race([p1,p2]).then(function(res){},function(error){});

1.vue的官方文档
	https://cn.vuejs.org/v2/guide/installation.html
	
	学习相关es5,es6的相关知识
	学些webpack相关知识

	a.对浏览器只支持高版本的,因为vue采用了es5,es6的语法
	b.需要安装vue
		npm install vue
	c.采用npm安装,需要安装nodejs
	d.安装一个vue-cli的命令行工具,它可以创建一个前端的项目
		https://www.npmjs.com/package/vue-cli
		#1.安装命令
			npm install --global vue-cli
		#2.创建基于 webpack 模版的项目
			vue init webpack myProjectName
		#3.进入到myProjectName项目中,执行命令
			cd myProjectName
		#4.他主要是为了下载相关的依赖
			npm install
		#5.运行项目
			npm run dev
	e.webpack模版的目录结构
		index.html:项目根视图
		src/main.js,最为整体的入口
2.相关学习,Vue中的对象应用
	a.模版语法
		定义:
			data(){
				return {
					msg:'我是模版语法'
				}
			};
		使用:
		{{}}模版：
			{{ 语法 }}
			{{ 1+1 }}
			{{0<10?'正确':'错误'}}
			{{注意:只能是单行表达式,并且不可以作用到html的属性上}}

		注意:指令必须要作用到dom节点上
		Vue指令:
			<p v-once>这个将不会改变:{{语法}}</p>,在该p标签中的模版语法都只渲染一次,当p中引用的语法值变更时,并不会随之变化
			<p v-html='msg'></p>,因为{{语法}}输出的是字符串,如果想让输出的内容变化成html就需要用到v-html了
			v-text,它与v-html是相反的,输出的是字符串,并不会进行解析
			v-bind:attrName='msg',它可以动态的设置dom的属性,
		条件渲染指令:
			<template v-if="boolean">
				<div>我是v-if指令,</div>
			</template>
			<template v-else-if="boolean">
				<div>这是2.1.0新增加的特性</div>
			</template>
			<template v-else>
				<div>当v-if=false时,执行v-else中的内容</div>
			</template>

			v-show=boolean,显示,或隐藏;

			v-if,v-show的区别,v-show它都会渲染dom内容,v-if只有条件为true才会渲染

			key,管理重复的元素
				因为vue会采用高效的方法,有时候会出现重复利用dom节点,如果想区分开来就增加一个key属性并设置不同的值

			很多html标签,是不可以相互嵌套的

		列表渲染：
			<ul>
				<li v-for="(item,index) in arrays" :value="item.value" :key="item.value">{{item.name}}</li>
			</ul>

		事件监听:
			v-on:eventName='methodName';或者v-on:eventName='methodName($event)'

			事件修饰符:
				stop:阻止冒泡
				prevent:阻止默认事件
				once:只执行一次
				self:
			按键修饰符:
				enter,
				tab,
				shift,
				space,
			鼠标修饰符:
				left
				right
				middle
	b.计算属性及监听
		计算属性:必须有返回值,里面大部分都是sync方法
			computed:{
				methodName:{

					return '';
				}
			}
		监听:监听模版属性值的变化,然后要执行的操作
			watch:{
				data中的属性:(val)=>{
					要做的事情,
					可以做一些异步async操作

				}
			}
		双向数据绑定:用于表单中的input,select,textare等
			v-model
			修饰符:
				lazy,number,trim
	c.class与style
		<div v-bind:class="{cssName:boolean}">
		<div :class="[demo1,demo2]">
		<div v-bind:class="classObj">
		export default{
			data(){
				return {
					classObj:{
						cassName:boolean
					}
				}
			}
		}
	
3.组件,component
	全局组件，局部组件

	单文件组件：
		由3部分组成：
			1.<template>
				<div>
					<!--> 里面只能有一个根标签,就是dive,必须要有 <-->
				</div>
			  </template>
			2.<script>
				export default{

				}
			  </script>
			3.<style scoped>
				<!--> scoped,代表它是局部 <-->
			  </style>
	父子级组件:
		父组件--发送数据-->子组件,在子组件中定义props=['attr1','attr2']
			可以定义props中的属性类型、是否必须、默认值等

		子组件--响应--->父组件,
			在子组件中可以调用$emit('parentEvent')
			在父组件中定义parentEvent事件,

			如何传递参数呢,$emit,第二个参数可以传递,可以是[],{}等

		插槽,slot,在组件之间的内容
			插槽是可以有name的
			作用域插槽,这个是由子传递给父的数据
				,子<slot name="s1" text="ooxx"></slot>
				,父<p slot="s1" slot-scope="key">{{key.text}}</p>

		动态组件:
			这样可以动态的渲染组件,可以通过修改componentName,来渲染其它的组件
			<keep-alive>
				<component :is="componentName"></component>
			</keep-alive>
			keep-alive,缓存其它的组件,就是不会重新的渲染了


	自定义指令:
		全局指令:
			Vue.directive('name',{
				inserted:function(el){
					el.focus()
				}
			})
		局部指令
			export default{
				directives:{
					name:{
						inserted:function(el){
							el.focus()
						}
					}
				}
			}
	过滤器:filter,主要是为了格式化数据
		{{val|filterMethod}}
		如果有多个参数:
			{{val|filterMethod(第二个参数,第三个参数)}},val默认是第一个个参数

axios:
	安装:
		npm install axios;
		import Axios from 'axios';
		在Vue的原型中引用Vue.prototype.$axios = Axios;

		get(url,{params:{name:'',count:10}).then(res=>{}).catch(error=>{});,
		post请求的数据更是:
			form-data:?name=jiege&age=10
			x-www-form-urlencoded:{name:'jiege',age:10}
			他们需要可以转化,qs.stringify({name:'jiege',age:10});
		post(),
		全局配置,拦截器
		
		跨域问题:
		https://blog.csdn.net/s8460049/article/details/61190709

Vue-Router,路由




VueX,
	npm install vuex --save
	在Vue实例中引用的时候,store:store;名字必须是store

	let store = new Vuex.Store({
		state:{
			count:10
		},
		mutations:{
			//这个主要是,来修改state中的数据
			//在外部这样调用:this.$store.commit('addCount');
			addCount(state){
				state.count++;
			}
		},
		actions:{
			//这个主要是一个动作,它是可以省略的,但是如果没有省略,就需要这样调用了
			//可以执行一些异步操作,一些数据请求
			//context,主要作用:承上启下
			//调用方式this.$store.dispatch('addCount');
			addCount(context){
				context.commit('addCount');
			}
		}
	});


	
		



